// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
insert into accounts (
    balance
) values (
    $1
) returning id, balance, created_at
`

func (q *Queries) CreateAccount(ctx context.Context, balance int64) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, createAccount, balance)
	var i Accounts
	err := row.Scan(&i.ID, &i.Balance, &i.CreatedAt)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
delete from accounts
where id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
select id, balance, created_at from accounts
where id = $1
limit 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Accounts
	err := row.Scan(&i.ID, &i.Balance, &i.CreatedAt)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :exec
update accounts
set balance = $2
where id = $1
`

type UpdateAccountParams struct {
	ID      int64 `json:"id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.ExecContext(ctx, updateAccount, arg.ID, arg.Balance)
	return err
}
