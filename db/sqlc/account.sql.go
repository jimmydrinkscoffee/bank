// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: account.sql

package db

import (
	"context"
)

const changePassword = `-- name: ChangePassword :one
update accounts
set password = $2
where id = $1
returning id, email, password, balance, password_changed_at, created_at
`

type ChangePasswordParams struct {
	ID       int64  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) ChangePassword(ctx context.Context, arg ChangePasswordParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, changePassword, arg.ID, arg.Password)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Balance,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createAccount = `-- name: CreateAccount :one
insert into accounts (email, password, balance)
values ($1, $2, $3)
returning id, email, password, balance, password_changed_at, created_at
`

type CreateAccountParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Balance  int64  `json:"balance"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Email, arg.Password, arg.Balance)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Balance,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :one
delete from accounts
where id = $1
returning id, email, password, balance, password_changed_at, created_at
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, deleteAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Balance,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const readAccount = `-- name: ReadAccount :one
select id, email, password, balance, password_changed_at, created_at from accounts
where email = $1
limit 1
`

func (q *Queries) ReadAccount(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRowContext(ctx, readAccount, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Balance,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateBalance = `-- name: UpdateBalance :one
update accounts
set balance = balance + $1
where id = $2
returning id, email, password, balance, password_changed_at, created_at
`

type UpdateBalanceParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateBalance, arg.Amount, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Balance,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
