// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
insert into sessions (id, email, refresh_token, user_agent, client_ip, expired_at)
values ($1, $2, $3, $4, $5, $6)
returning id, email, refresh_token, user_agent, client_ip, blocked, expired_at, created_at
`

type CreateSessionParams struct {
	ID           uuid.UUID `json:"id"`
	Email        string    `json:"email"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	ExpiredAt    time.Time `json:"expired_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.Email,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.ExpiredAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.Blocked,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const readSession = `-- name: ReadSession :one
select id, email, refresh_token, user_agent, client_ip, blocked, expired_at, created_at from sessions
where id = $1
limit 1
`

func (q *Queries) ReadSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, readSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.Blocked,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}
